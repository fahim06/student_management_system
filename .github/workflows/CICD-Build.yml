name: Python CI

on:
  push:
    branches:
      - '**'
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - '**'

  workflow_dispatch:

permissions:
  contents: read

jobs:

  cicd:
    runs-on: ubuntu-latest
    env:
      # Required by settings.py; safe to use a fake secret in CI
      SECRET_KEY: ci-secret-key-for-testing
      # Use explicit false/true strings per your settings handling; set to False in CI
      DEBUG: 'False'
      # Use SQLite in CI to avoid external DB services
      DB_ENGINE: django.db.backends.sqlite3
      DB_NAME: db.sqlite3
      DB_USER: ''
      DB_PASSWORD: ''
      DB_HOST: ''
      DB_PORT: ''

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 django-stubs

      - name: Lint with Flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Migrations
        run: |
          python manage.py migrate --noinput

      - name: Check for Missing Migrations
        run: |
          # Fail if there are model changes that aren't committed as migrations
          python manage.py makemigrations --dry-run --check

      - name: Collect Static Files
        run: |
          python manage.py collectstatic --noinput

      - name: Django Check
        run: |
          python manage.py check --deploy

      - name: Create Superuser
        run: |
          if [ -z "${DJANGO_SUPERUSER_USERNAME:-}" ] || [ -z "${DJANGO_SUPERUSER_EMAIL:-}" ] || [ -z "${DJANGO_SUPERUSER_PASSWORD:-}" ]; then
            echo "Superuser secrets not provided â€” skipping createsuperuser step."
          else
            python manage.py createsuperuser --noinput || true
          fi
        env:
          DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
          DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
          DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}

      - name: Run Tests
        run: |
          python manage.py test
